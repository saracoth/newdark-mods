DML1

// Let's limit this to Thief-like games. Note that it's not necessarily
// possible to prevent multiple copies of this mod from being applied, if
// the user copies files to multiple valid folders. If we change a property
// of a specific pre-existing object in a unique way, we can look for that.
// However, we can't use NAME checks for the (non)existance of new CreateArch
// archetypes, since we won't reliably know their IDs.
FINGERPRINT
{
	NAME -2099 Garrett
}

// This allows us to use our .nut files.
#script "squirrel"

/*
================================================================================
== Radar Control Item ==========================================================
================================================================================
*/

// Create an item the player can use to toggle the radar display on and off.
// Basing it off of Compass2 because we're going to use the old/unused compass
// model anyway, so may a well make it behave like a proper compass item.

CreateArch "Compass2" "J4FRadarControlItem"
{
	+ObjProp "GameName" = name_j4f_radar_inactive: "Radar (Inactive)"
	
	+ObjProp "ModelName" = compass
	
	// Permit using from inventory.
	+ObjProp "FrobInfo"
	{
		"World Action" "Move, FocusScript"
		// When using it from our inventory, it should tell our scripts.
		"Inv Action" "Script"
		"Tool Action" "[None]"
	}
	
	// This script will turn the radar effect on and off when frobbed.
	+ObjProp "Scripts"
	{
		"Script 0" "J4FRadarToggler"
		"Don't Inherit" FALSE
	}
}

/*
================================================================================
== Radar-Enabled Player ========================================================
================================================================================
*/

// It's not safe for generic gameplay mods to add scripts directly to the
// Garrett archetype. Doing so could clash with other mods and FMs. So instead,
// we create a brand new metaproperty with a single script, then give the
// metaproperty to Garrett. This safely puts the new scripts on the player,
// without risk of interfering with other mods and behaviors.

CreateArch "MetaProperty" "J4FRadarEnabledPlayer"
{
	+ObjProp "Scripts"
	{
		// This adds the control item to our inventory on game start.
		"Script 0" "J4FGiveRadarItem"
		"Don't Inherit" FALSE
	}
}

// Assign the new metaproperty to the Garrett object, which is the usual Avatar
// type used in missions. As a bonus, mods of this mod could *remove* this
// metaproperty to prevent automatically giving the item to the player!

+MetaProp "Garrett" "J4FRadarEnabledPlayer"

/*
================================================================================
== Point of Interest Metaproperties ============================================
================================================================================
*/

// This is nonfunctional on its own, but serves as a common parent type for all
// metaproperties that mark an item as interesting.
CreateArch "MetaProperty" "J4FRadarPointOfInterest"

// This is used when we don't have a more specific POI type to assign, but
// know we're interested in a thing.
CreateArch "J4FRadarPointOfInterest" "J4FRadarFallbackPOI"

// The rest are to flag items for specific behaviors.
CreateArch "J4FRadarPointOfInterest" "J4FRadarContainerPOI"
CreateArch "J4FRadarPointOfInterest" "J4FRadarDevicePOI"
CreateArch "J4FRadarPointOfInterest" "J4FRadarEquipPOI"
CreateArch "J4FRadarPointOfInterest" "J4FRadarCreaturePOI"
CreateArch "J4FRadarPointOfInterest" "J4FRadarLootPOI"

// This one is an oddball, because rather than rely on proxy items, we need
// to watch the book/scroll/etc. for frob events. We can only do that if we
// can attach a script to the item itself.
CreateArch "J4FRadarPointOfInterest" "J4FRadarReadablePOI"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FRadarReadableTarget"
		"Don't Inherit" FALSE
	}
}

/*
================================================================================
== Radar Point-of-interest Proxies =============================================
================================================================================
*/

// There are some cases where scripts cannot be directly attached to an object
// of interest. For example, anything marked as "don't inherit" scripts. It may
// be possible to manually set a Script 1, Script 2, or Script 3 property if one
// is available, but we're trying to avoid that, both in DML and in squirrel.
// And attaching metaproperties to Don't-Inherit items will fail to attach any
// scripts from that metaproperty.
//
// The least side-effecting method, so far, is to instead create a completely
// separate object to attach scripts to. It will represent that interesting item
// to the radar system on its behalf. These proxies could also be attached to
// the original item with links, which should allow the game to destroy the
// proxy if the original object gets destroyed. That simplifies POI cleanup.

// This is the proxy object marker itself. We create one of these for every
// proxied POI item.
CreateArch "Marker" "J4FRadarProxyPOI"

// This non-functional metaproperty is used to flag whether an item has a proxy.
// It's quicker than searching through all its links to see if any of the linked
// items happens to be a proxy, and speeds up simple "do I have a proxy yet?"
// checks.
CreateArch "MetaProperty" "J4FRadarProxied"
