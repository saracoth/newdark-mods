DML1

// Let's limit this to Thief-like games. Note that it's not necessarily
// possible to prevent multiple copies of this mod from being applied, if
// the user copies files to multiple valid folders. If we change a property
// of a specific pre-existing object in a unique way, we can look for that.
// However, we can't use NAME checks for the (non)existance of new CreateArch
// archetypes, since we won't reliably know their IDs.
FINGERPRINT
{
	NAME -2099 Garrett
}

// This allows us to use our .nut files.
#script "squirrel"

/*
================================================================================
== Radar Control Item ==========================================================
================================================================================
*/

// Create an item the player can use to toggle the radar display on and off.
// Basing it off of Compass2 because we're going to use the old/unused compass
// model anyway, so may a well make it behave like a proper compass item.

CreateArch "Compass2" "J4FRadarControlItem"
{
	+ObjProp "GameName" = name_j4f_radar_inactive: "Radar (Inactive)"
	
	+ObjProp "ModelName" = compass
	
	// Permit using from inventory.
	+ObjProp "FrobInfo"
	{
		"World Action" "Move, FocusScript"
		// When using it from our inventory, it should tell our scripts.
		"Inv Action" "Script"
		"Tool Action" "[None]"
	}
	
	// This script will create the pinging "Marco" puff when used.
	+ObjProp "Scripts"
	{
		"Script 0" "J4FRadarToggler"
		"Don't Inherit" FALSE
	}
}

/*
================================================================================
== Radar-Enabled Player ========================================================
================================================================================
*/

// It's not safe for generic gameplay mods to add scripts directly to the
// Garrett archetype. Doing so could clash with other mods and FMs. So instead,
// we create a brand new metaproperty with a single script, then give the
// metaproperty to Garrett. This safely puts the new scripts on the player,
// without risk of interfering with other mods and behaviors.

CreateArch "MetaProperty" "J4FRadarEnabledPlayer"
{
	+ObjProp "Scripts"
	{
		// This adds the control item to our inventory on game start.
		"Script 0" "J4FGiveRadarItem"
		"Don't Inherit" FALSE
	}
}

// Assign the new metaproperty to the Garrett object, which is the usual Avatar
// type used in missions. As a bonus, mods of this mod could *remove* this
// metaproperty to prevent automatically giving the item to the player!

+MetaProp "Garrett" "J4FRadarEnabledPlayer"

/*
================================================================================
== Point of Interest Metaproperties ============================================
================================================================================
*/

// This is nonfunctional on its own, but serves as a common parent type for all
// metaproperties that mark an item as interesting.

CreateArch "MetaProperty" "J4FRadarPointOfInterest"

// This is used when we don't have a more specific POI type to assign, but
// know we're interested in a thing.
CreateArch "J4FRadarPointOfInterest" "J4FRadarFallbackPOI"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FRadarGrabbableTarget"
		"Don't Inherit" FALSE
	}
}

CreateArch "J4FRadarPointOfInterest" "J4FRadarContainerPOI"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FRadarContainerTarget"
		"Don't Inherit" FALSE
	}
}

CreateArch "J4FRadarPointOfInterest" "J4FRadarDevicePOI"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FRadarDeviceTarget"
		"Don't Inherit" FALSE
	}
}

CreateArch "J4FRadarPointOfInterest" "J4FRadarEquipPOI"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FRadarEquipTarget"
		"Don't Inherit" FALSE
	}
}

CreateArch "J4FRadarPointOfInterest" "J4FRadarCreaturePOI"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FRadarCreatureTarget"
		"Don't Inherit" FALSE
	}
}

CreateArch "J4FRadarPointOfInterest" "J4FRadarReadablePOI"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FRadarReadableTarget"
		"Don't Inherit" FALSE
	}
}

CreateArch "J4FRadarPointOfInterest" "J4FRadarLootPOI"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FRadarLootTarget"
		"Don't Inherit" FALSE
	}
}

/*
================================================================================
== Sneaky Loot Detectors =======================================================
================================================================================
*/

// The IsLoot metaproperty is a tricky thing. We can't attach scripts directly,
// and Agent/Target limitations prevent us from doing anything too clever with
// the act/react system. So flagging loot items as interesting involves a mix
// of techniques. The metaproperty below can be attached to items linked to
// loot in various ways, allowing them to flag the loot that way.

CreateArch "MetaProperty" "J4FRadarContentLinkChecker"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FRadarChildDetector"
		"Don't Inherit" FALSE
	}
}

+MetaProp "Creature" "J4FRadarContentLinkChecker"
+MetaProp "Container" "J4FRadarContentLinkChecker"

/*
================================================================================
== Unscriptable Item Workaround ================================================
================================================================================
*/

// An item (be it an archetype or, more likely, an individual object in a level)
// can be set to not inherit scripts. That includes those from metaproperties,
// whether assigned to an archetype or to that specific object itself. And we
// can't *safely* attach scripts directly to an object in squirrel. Yes, we can
// modify the Scripts property. However, even just filling an empty slot with a
// new script has side effects. The other scripts already on the object fire off
// new BeginScript events. So either existing instances of scripts undergo weird
// lifecycle changes, or perhaps additional copies of those scripts are being
// attached instead. Either way, when something is marked as Don't Inherit, I
// don't see any safe way to attach scripts to it.
//
// Enter these invisible markers. These act as stand-ins for unscriptable items,
// and are attached to those items through links.

// This is the proxy object marker itself.
CreateArch "Marker" "J4FRadarProxyPOI"

// This non-functional metaproperty is used to flag whether an item has a proxy.
// It's quicker than searching through all its links to see if any of the linked
// items happens to be a proxy, and speeds up simple "do I have a proxy yet?"
// checks.
CreateArch "MetaProperty" "J4FRadarProxied"
