DML1

// Let's limit this to Thief-like games. Note that it's not necessarily
// possible to prevent multiple copies of this mod from being applied, if
// the user copies files to multiple valid folders. If we change a property
// of a specific pre-existing object in a unique way, we can look for that.
// However, we can't use NAME checks for the (non)existance of new CreateArch
// archetypes, since we won't reliably know their IDs.
FINGERPRINT
{
	NAME -2099 Garrett
}

// This allows us to use our .nut files.
#script "squirrel"

/*
================================================================================
== New Stims ===================================================================
================================================================================
*/

// Interesting note, but the "stimulate object" receptron effect is limited to
// stim names of 15 characters or less. Otherwise, I might call this
// J4FFairyFollowStim.

// We use this stim in the following ways:
// 1) A negative value will be broadcast to nearby creatures through a radius
//	stim. If hit, that creature is a candidate for being followed by the fairy.
// 2) The candidate creatures send a positive value back to the fairy that
//	pinged them. This allows the fairy's script to see what object IDs responded
//	to the ping.

CreateArch "Stimulus" "J4FFryFllwStim"

/*
================================================================================
== Fairy Control Item ==========================================================
================================================================================
*/

// Create an item that can be used to control the fairy's behavior.

CreateArch "Tulz" "J4FFairyControlBell"
{
	+ObjProp "GameName" = name_j4f_fairy_controller: "Tinker's Bell"
	
	+ObjProp "ModelName" = rbell
	
	// Allow using the item.
	+ObjProp "FrobInfo"
	{
		"World Action" "Move, FocusScript"
		// When using it from our inventory, trigger our script.
		"Inv Action" "Script"
		"Tool Action" "[None]"
	}

	// This script will create the minions when this item is used.
	+ObjProp "Scripts"
	{
		"Script 0" "J4FFairyController"
		"Don't Inherit" FALSE
	}
	
	// This is a semicolon-delimited list of key=value pairs for the scripts.
	// We use it here to define doubleclick behavior/timing.
    +ObjProp "DesignNote"
    {
		// NOTE: Windows's default double-click interval is 500ms, but we can
		// tweak our value here as needed.
        "" DoubleClickTime=0.2;MaxRange=100;MinRadius=12.0;MinTailRadius=0.5;MaxRadius=100.0;MinSpeed=5.0;TargetJourneyTime=0.75;SafetyUnits=2
    }
}

/*
================================================================================
== Setup Script ================================================================
================================================================================
*/

// We'll use this script to give the player the item, as well as create the
// fairy object and any links/attachments/etc. we need to keep track of it.
//
// It's not safe for generic gameplay mods to add scripts directly to the
// Garrett archetype. Doing so could clash with other mods and FMs. So instead,
// we create a brand new metaproperty with a single script, then give the
// metaproperty to Garrett. This safely puts the new script on the player,
// without risk of interfering with other mods and behaviors.

CreateArch "MetaProperty" "J4FPlayerFairySetup"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FFairySetup"
		"Don't Inherit" FALSE
	}
}

// Assign the new metaproperty to the Garrett object, which is the usual Avatar
// type used in missions.

+MetaProp "Garrett" "J4FPlayerFairySetup"

/*
================================================================================
== Fairy Core Object ===========================================================
================================================================================
*/

// This is the object our scripts will actually control. It needs to be a
// moving terrain object so that it can follow from one point to another.

CreateArch "Tulz" "J4FFairy"
{
	+ObjProp "MovingTerrain"
	{
		"Active" TRUE
	}
	
	// Choose a long or stick-like model so we can attach particles to one end
	// and rotate the whole works. This is similar to what's done in Thief 2's
	// Will O'Wisp objects. It works best if the object has sub-models, and one
	// of them is offset from the object's center point enough to give a range
	// of motion that is noticeable, but not extreme. This little tibia bone
	// happens to fit the bill, and exist in both games. Thief 2 has a special
	// wisp_arm model it uses for its Will O' Wisp objects.
	+ObjProp "ModelName" = bone1
	
	// This part of the fairy isn't meant to be visible. We'll attach the
	// visible parts to it later, with links.
	+ObjProp "RenderAlpha" = 0.0
	
	+ObjProp "PhysAIColl" = false
	+ObjProp "CollisionType"
	{
		"" "[None]"
	}
	
	// Tweq->Rotate
	+ObjProp "CfgTweqRotate"
	{
		"Halt" "Continue"
		"AnimC" "[None]"
		"MiscC" "[None]"
		"CurveC" "[None]"
		"Primary Axis" 0
		"x rate-low-high" 5.00, 0.00, 360.00
		"y rate-low-high" 7.50, 0.00, 360.00
		"z rate-low-high" 0.00, 0.00, 0.00
	}

	// Tweq->RotateState
	+ObjProp "StTweqRotate"
	{
		"AnimS" "On"
		"MiscS" "[None]"
		"Axis 1AnimS" "On"
		"Axis 2AnimS" "On"
		"Axis 3AnimS" "[None]"
	}
	
	+ObjProp "Scripts"
	{
		// This is a vanilla game script that shuffles moving terrain around.
		"Script 0" "StdElevator"
		// This script allows tracking of follow candidates. It lets the fairy
		// know who its controller object is, so that it can provide a list of
		// follow candidates.
		"Script 1" "J4FFairyIntermediary"
		"Don't Inherit" FALSE
	}
	
	// By default, the Fairy will reduce all generated and received stims to 0.
	// In scripts, we will temporarily "unlock" stuff by setting this value to
	// one instead.
	+ObjProp "arSrcScale" = 0.0
}

++Receptron "J4FFairy" "J4FFryFllwStim"
{
	Min None
	Max None
	
	Target Me
	Agent Source
	
	Effect "stim_script_msg"
	{
		"Flags" "[None]"
	}
}

++StimSource "J4FFairy" "J4FFryFllwStim"
{
	// Things can potentially receive their own radius stims, so we'll use
	// positive and negative to distinguish intent. A more readable approach
	// would probably be to use two different stims -- one for the fairy
	// reaching out, one for the candidate reaching back.
	Intensity -1.0
	
	Propagator "Radius"
	{
		Shape
		{
			"Radius" 25.0
			// We could make this LOS if we wanted. I'm assuming not caring
			// will make this less finnicky to use, in general.
			"Flags" "[None]"
			//"Flags" "Line of Sight (raycast)"
			"Dispersion" None
		}
		Life
		{
			"Flags" "No Max Firings"
			"Period" 500
			"Max Firings" 0
			"Intensity Slope" 0.0
		}
	}
}

/*
================================================================================
== Fairy Visible Body ==========================================================
================================================================================
*/

// Much of this uses Thief 2's WispBody for reference.

CreateArch "FireFX" "J4FFairyBody"
{
	// Renderer->Dynamic Light
	+ObjProp "SelfLit" = 80
	+ObjProp "SelfLitRad" = 12.0
	
	// Required in Thief 1/Gold, where FireFX doesn't specify this model for us.
	+ObjProp "ModelName" = "FX_Particle"
	
	// SFX->Particle Launch Info
	+ObjProp "PGLaunchInfo"
	{
		"Launch Type" "Sphere"
		"Box Min" 0.00, -0.25, -0.25
		"Box Max" 0.00, 0.25, 0.25
		"Min Radius" 0.05
		"Max Radius" 0.10
		"Loc unrotated?" FALSE
		"Velocity Min" 0.00, 0.00, 0.00
		"Velocity Max" 0.00, 0.00, 0.00
		"Vel unrotated?" FALSE
		"Min time" 2.00
		"Max time" 2.50
	}

	// SFX->Particles
	+ObjProp "ParticleGroup"
	{
		"Active" TRUE
		"Particle Render Type" "Single-colored disk"
		"Particle Animation" "Launched continually"
		"Particle Group Motion" "Immobile"
		"number of particles" 3
		"size of particle" 0.50
		"bitmap name" ""
		"velocity" 0.00, 0.00, 0.00
		"gravity vector" 0.00, 0.00, 0.00
		"color (palettized)" 241
		"2nd color" 217
		"3rd color" 241
		"alpha" 100
		"fixed-group radius" 0.00
		"spin / pulse group" FALSE
		"spin speed" 0.00, 0.00, 0.00
		"pulse magnitude" 0.00
		"pulse cycle time ms" 0
		"particle fade time" 0.75
		"launch period" 0.50
		"animation offset ms" 0
		"Group-scale velocity" 0.00
		"bm-disk flags" "[None]"
		"bm-disk birth time" 0.00
		"bm-disk rot (vel, offs, rand)" 0.00, 0.00, 0.00
		"bm-disk ani frame time" 0.00
		"bm-disk grow speed" 0.00
		"bm-disk rgb" 0, 0, 0
		"bm-disk 2nd rgb" 0, 0, 0
		"bm-disk 3rd rgb" 0, 0, 0
		"always simulate (slow)" FALSE
		"always simulate group" FALSE
		"particles start launched" TRUE
		"alpha subpixel particles" FALSE
		"skip subpixel particles" FALSE
		"ignore attachment refs" FALSE
		"force matching unrefs" FALSE
	}
}

++Link "J4FFairyBody" "J4FFairy" "ParticleAttachement"
{
	"Type" "Submodel"
	"vhot #" 0
	"joint" "N/A"
	// The bone1 model we use seems to have two sub-models. Between 0 and 1,
	// submodel 1 gives a larger range of motion.
	"submod #" 1
}

/*
================================================================================
== Fairy Sparkle Trail =========================================================
================================================================================
*/

// Much of this uses Thief 2's WispTail for reference.

CreateArch "FireFX" "J4FFairyTail"
{
	// Required in Thief 1/Gold, where FireFX doesn't specify this model for us.
	+ObjProp "ModelName" = "FX_Particle"
	
	// SFX->Particle Launch Info
	+ObjProp "PGLaunchInfo"
	{
		"Launch Type" "Sphere"
		"Box Min" 0.00, -0.25, -0.25
		"Box Max" 0.00, 0.25, 0.25
		"Min Radius" 0.05
		"Max Radius" 0.10
		"Loc unrotated?" FALSE
		"Velocity Min" -0.51, -0.51, -0.51
		"Velocity Max" 0.51, 0.51, 0.51
		"Vel unrotated?" FALSE
		"Min time" 1.00
		"Max time" 2.50
	}

	// SFX->Particles
	+ObjProp "ParticleGroup"
	{
		"Active" TRUE
		"Particle Render Type" "Single-colored disk"
		"Particle Animation" "Launched continually"
		"Particle Group Motion" "Trailing object"
		"number of particles" 50
		"size of particle" 0.05
		"bitmap name" ""
		"velocity" 0.00, 0.00, 0.00
		"gravity vector" 0.00, 0.00, 0.00
		"color (palettized)" 241
		"2nd color" 223
		"3rd color" 217
		"alpha" 100
		"fixed-group radius" 0.00
		"spin / pulse group" FALSE
		"spin speed" 0.00, 0.00, 0.00
		"pulse magnitude" 0.00
		"pulse cycle time ms" 0
		"particle fade time" 0.05
		"launch period" 0.10
		"animation offset ms" 0
		"Group-scale velocity" 0.00
		"bm-disk flags" "[None]"
		"bm-disk birth time" 0.00
		"bm-disk rot (vel, offs, rand)" 0.00, 0.00, 0.00
		"bm-disk ani frame time" 0.00
		"bm-disk grow speed" 0.00
		"bm-disk rgb" 0, 0, 0
		"bm-disk 2nd rgb" 0, 0, 0
		"bm-disk 3rd rgb" 0, 0, 0
		"always simulate (slow)" FALSE
		"always simulate group" FALSE
		"particles start launched" TRUE
		"alpha subpixel particles" FALSE
		"skip subpixel particles" FALSE
		"ignore attachment refs" FALSE
		"force matching unrefs" FALSE
	}
}

++Link "J4FFairyTail" "J4FFairy" "ParticleAttachement"
{
	"Type" "Submodel"
	"vhot #" 0
	"joint" "N/A"
	// The bone1 model we use seems to have two sub-models. Between 0 and 1,
	// submodel 1 gives a larger range of motion.
	"submod #" 1
}

/*
================================================================================
== Fairy Follow Targets ========================================================
================================================================================
*/

// We use this to flag potential fairy following targets.

CreateArch "MetaProperty" "J4FFairyFollowCandidate"

// When the fairy stimulates us, respond to let it know we're a candidate.

++Receptron "J4FFairyFollowCandidate" "J4FFryFllwStim"
{
	// Fairy sends us a negative value.
	Min None
	Max -0.1
	
	Target Source
	Agent Me

	// We send back a 1
	Effect "stimulate"
	{
		"Stimulus" "J4FFryFllwStim"
		"Multiply By" 0.00
		"Then Add" 1.00
	}
}

// The player is a potential candidate.
+MetaProp "Avatar" "J4FFairyFollowCandidate"

// As are all kinds of NPC creatures.
+MetaProp "Creature" "J4FFairyFollowCandidate"
