DML1

/*
Dunno if any of this is achievable yet, but let's try it out. A remote light
object that follows the player's gaze. Probably as close as I'll get to a
"flashlight" type of mod.

Core Features:
* Glowy flying object that roughly follows the player's gaze.
* Allow the player to switch between three modes/behaviors: stay where you
	are, follow your gaze, and attach to nearby creature (including you).

Semi-core features:
* Inventory item that accepts click and double click. Click for move/halt,
	doubleclick for insta-teleport. I think implementing an inventory item
	doubleclick feature at all would be interesting, and broadly useful.

Make it Pretty:
* What does the fairy look like?
* Can we create a bobbing appearance? Ie, make the NPC invisible, constantly
	rotating on all three axis, and attach the visible/glowy part to it?
	The base implementation seems to have some funky wobbly movement as a
	side effect, which is nice. Also look into the Thief2 wisp object(s).
* Dingling bell sound when interacting with fairy controller.
* Is it remotely possible that while following an NPC, the fairy behavior
	can change? Maybe it douses its light and spews a colored particle
	effect based on stuff like alert level? Or it keeps the light, but
	colors it?

TODO: Implement controllable stop, gaze-follow, and teleport functionality.

*/

// Let's limit this to Thief-like games. Note that it's not necessarily
// possible to prevent multiple copies of this mod from being applied, if
// the user copies files to multiple valid folders. If we change a property
// of a specific pre-existing object in a unique way, we can look for that.
// However, we can't use NAME checks for the (non)existance of new CreateArch
// archetypes, since we won't reliably know their IDs.
FINGERPRINT
{
	NAME -2099 Garrett
}

// This allows us to use our .nut files.
#script "squirrel"

/*
================================================================================
== Fairy Control Item ==========================================================
================================================================================
*/

// Create an item that can be used to control the fairy's behavior.

CreateArch "Tulz" "J4FFairyControlBell"
{
	+ObjProp "GameName" = name_j4f_fairy_controller: "Tinker's Bell"
	
	+ObjProp "ModelName" = rbell
	
	// Allow using the item.
	+ObjProp "FrobInfo"
	{
		"World Action" "Move, FocusScript"
		// When using it from our inventory, trigger our script.
		"Inv Action" "Script"
		"Tool Action" "[None]"
	}

	// This script will create the minions when this item is used.
	+ObjProp "Scripts"
	{
		"Script 0" "J4FFairyController"
		"Don't Inherit" FALSE
	}
	
	// This is a semicolon-delimited list of key=value pairs for the scripts.
	// We use it here to define doubleclick behavior/timing.
	// TODO: implement
    +ObjProp "DesignNote"
    {
		// NOTE: Windows's default double-click interval is 500ms, but we can
		// tweak our value here as needed.
        "" DoubleClickTime=0.2;MaxRange=100
    }
}

/*
================================================================================
== Setup Script ================================================================
================================================================================
*/

// We'll use this script to give the player the item, as well as create the
// fairy object and any links/attachments/etc. we need to keep track of it.
//
// It's not safe for generic gameplay mods to add scripts directly to the
// Garrett archetype. Doing so could clash with other mods and FMs. So instead,
// we create a brand new metaproperty with a single script, then give the
// metaproperty to Garrett. This safely puts the new script on the player,
// without risk of interfering with other mods and behaviors.

CreateArch "MetaProperty" "J4FPlayerFairySetup"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FFairySetup"
		"Don't Inherit" FALSE
	}
}

// Assign the new metaproperty to the Garrett object, which is the usual Avatar
// type used in missions.

+MetaProp "Garrett" "J4FPlayerFairySetup"

/*
================================================================================
== Fairy Core Object ===========================================================
================================================================================
*/

// This is the object our scripts will actually control. It needs to be a
// moving terrain object so that it can follow from one point to another.

CreateArch "Object" "J4FFairy"
{
	+ObjProp "MovingTerrain" = true
	
	// TODO: better model, or just attach a particle effect and turn off render
	+ObjProp "ModelName" = skull
	
	+ObjProp "SelfLit" = 50
	+ObjProp "SelfLitRad" = 12.0
	
	+ObjProp "PhysAIColl" = false
	+ObjProp "CollisionType"
	{
		"" "[None]"
	}
	
	// This is a vanilla game script that shuffles moving terrain around.
	+ObjProp "Scripts"
	{
		"Script 0" "StdElevator"
		"Don't Inherit" FALSE
	}
}
