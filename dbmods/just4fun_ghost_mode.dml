DML1

// Let's limit this to Thief-like games. Note that it's not necessarily
// possible to prevent multiple copies of this mod from being applied, if
// the user copies files to multiple valid folders. If we change a property
// of a specific pre-existing object in a unique way, we can look for that.
// However, we can't use NAME checks for the (non)existance of new CreateArch
// archetypes, since we won't reliably know their IDs.
FINGERPRINT
{
	NAME -2099 Garrett
}

// This allows us to use our .nut files.
#script "squirrel"

/*
================================================================================
== Ghost Mode Toggle Item ======================================================
================================================================================
*/

// Create an item the player can use to enter or exit ghost mode.

CreateArch "Tulz" "J4FGhostToggler"
{
	+ObjProp "GameName" = name_j4f_ghost_toggle_on: "Ghost Mode (Inactive)"
	
	// Picking a weird model, because why not? Have a gong.
	+ObjProp "ModelName" = gong
	
	// Required to allow using from inventory.
	+ObjProp "FrobInfo"
	{
		"World Action" "Move, FocusScript"
		// When used from inventory, trigger the script defined below.
		"Inv Action" "Script"
		"Tool Action" "[None]"
	}

	// This script will toggle our ghost mode status.
	+ObjProp "Scripts"
	{
		"Script 0" "J4FGhostModeToggle"
		"Don't Inherit" FALSE
	}
}

/*
================================================================================
== Ghost Toggler Giver =========================================================
================================================================================
*/

// It's not safe for generic gameplay mods to add scripts directly to the
// Avatar or Garrett archetypes. Doing so could clash with other mods and FMs
// that put scripts there. So instead, we create a brand new metaproperty with
// our scripts, then give the metaproperty to Garrett. This safely puts the new
// script on the player, without risk of interfering with anything else.

CreateArch "MetaProperty" "J4FGiveGhostModeItem"
{
	+ObjProp "Scripts"
	{
		"Script 0" "J4FGhostToggleGiver"
		"Don't Inherit" FALSE
	}
}

// Assign the new metaproperty to the Garrett object, which is the usual Avatar
// type used in missions. As a bonus, mods of this mod could *remove* this
// metaproperty to prevent automatically giving the item to the player!

+MetaProp "Garrett" "J4FGiveGhostModeItem"

/*
================================================================================
== Ghost Mode Metaproperty =====================================================
================================================================================
*/

// This metaproperty contains an assortment of tweaks for a "ghost mode."

CreateArch "MetaProperty" "J4FGhostMode"
{
	// This puts Garrett on an alliance that everyone usually ignores. That
	// simulates a kind of invisibility, but once you leave ghost mode NPCs
	// can retroactively have noticed you. In reality, they always noticed
	// you, but only started to care about that once you leave ghost mode.
	+ObjProp "AI_Team" = Neutral
	
	// Not really a noclip mode, but allow walking through AI.
	+ObjProp "PhysAIColl" = false
	
	// Also walking through objects. Static level geometry still works on you,
	// but you can easily fall through an elevator platform to your death. Fun!
	//
	// For some reason, we can't seem to remove the player's normal "Bounce"
	// behavior by applying this metaproperty. But defining the none
	// behavior here allows us to copy it with an add_prop (Set Property)
	// receptron. Or, in our case, we'll do the same in a squirrel script.
	// NOTE: The issue persists with both the "[None]" flag and the
	// "No Effect" flag. Perhaps multi-flag properties like this are
	// additive, meaning metaproperties can only toggle additional flags on
	// rather than turn current ones off? Or maybe we're competing with a
	// different metaproperty that also gives Garrett the Bounce flag?
	+ObjProp "CollisionType"
	{
		"" "[None]"
	}
	
	// Make your footsteps silent, as if you were your own mobile moss patch.
	// I didn't have much luck applying and removing this through metaproperties
	// alone, so we'll manually copy this property to the player later.
	+ObjProp "Fungus" = true
	
	// This isn't sufficient for perfect invisibility, and is mostly used to
	// artificially darken the light gem as a visual effect.
	+ObjProp "AI_VisCtrl"
	{
		"Low light" 125
		"Mid light" 126
		"High light" 127
		"Slow" 1.0
		"Fast" 1.0
		"Slow mod" 0
		"Norm mod" 0
		"Fast mod" 0
		"Wall dist" 1.75
		"Crouch mod" -3
		"Wall mod" -1
		"Corner lean mod" 1059481190
	}
}
